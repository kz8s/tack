#cloud-config

---
coreos:

  locksmith:
    endpoint: https://etcd.${ internal-tld }:2379
    etcd_cafile: /etc/ssl/etcd/ca.pem
    etcd_certfile: /etc/ssl/etcd/etcd.pem
    etcd_keyfile: /etc/ssl/etcd/etcd-key.pem

  units:
    - name: etcd-member.service
      command: start
      drop-ins:
        - name: 01-wait-for-certs.conf
          content: |
            [Unit]
            After=create-certificates.service
            Requires=create-certificates.service
            ConditionFileNotEmpty=/etc/ssl/etcd/ca.pem
            ConditionFileNotEmpty=/etc/ssl/etcd/etcd.pem
            ConditionFileNotEmpty=/etc/ssl/etcd/etcd-key.pem

        - name: 10-environment.conf
          content: |
            [Service]
            Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${ fqdn }:2379"
            Environment="ETCD_CERT_FILE=/etc/ssl/certs/etcd.pem"
            Environment="ETCD_CLIENT_CERT_AUTH=true"
            Environment="ETCD_DISCOVERY_SRV=${ internal-tld }"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${ fqdn }:2380"
            Environment="ETCD_INITIAL_CLUSTER_STATE=new"
            Environment="ETCD_INITIAL_CLUSTER_TOKEN=${ cluster-token }"
            Environment="ETCD_KEY_FILE=/etc/ssl/certs/etcd-key.pem"
            Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379"
            Environment="ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380"
            Environment="ETCD_NAME=${ hostname }"
            Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd.pem"
            Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd-key.pem"
            Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem"
            Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
            Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/ca.pem"

    - name: download-cfssl.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Requires=network-online.target
        Before=etcd-member.service
        Description=Download cfssl
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson

    - name: create-certificates.service
      command: start
      content: |
        [Unit]
        After=download-cfssl.service
        ConditionFileIsExecutable=/opt/bin/cfssl
        Description=Get ssl artifacts from s3 bucket using IAM role and create local certificates
        Requires=download-cfssl.service
        [Service]
        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem /etc/ssl/etcd
        ExecStartPre=/opt/bin/fetch-from-s3 ca.pem /etc/ssl/etcd
        ExecStart=/opt/bin/create-certificates
        RemainAfterExit=yes
        Type=oneshot

  update:
    reboot-strategy: etcd-lock

write-files:

  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCD_CA_FILE=/etc/ssl/etcd/ca.pem
      ETCD_CERT_FILE=/etc/ssl/etcd/etcd.pem
      ETCD_KEY_FILE=/etc/ssl/etcd/etcd-key.pem
      ETCDCTL_CA_FILE=/etc/ssl/etcd/ca.pem
      ETCDCTL_CERT_FILE=/etc/ssl/etcd/etcd.pem
      ETCDCTL_KEY_FILE=/etc/ssl/etcd/etcd-key.pem
      ETCDCTL_ENDPOINT=https://${ fqdn }:2379

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

  - path: /etc/logrotate.d/docker-containers
    content: |
      /var/lib/docker/containers/*/*.log {
        rotate 7
        daily
        compress
        size=1M
        missingok
        delaycompress
        copytruncate
      }

  - path: /opt/bin/fetch-from-s3
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -e
      mkdir -p /etc/ssl/etcd
      until /usr/bin/rkt run \
        --net=host \
        --trust-keys-from-https \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --volume=ssl,kind=host,source=/etc/ssl/etcd,readOnly=false --mount=volume=ssl,target=/etc/ssl/etcd \
        quay.io/coreos/awscli -- aws s3 cp "s3://${ s3-bucket }/$1" "$2"
      do
        echo "retrying"
        sleep 5.2
      done
      echo "✓"

  - path: /opt/bin/create-certificates
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -vex

      OUTDIR=/etc/ssl/etcd

      function error {
        echo "✗ Error on line $1"'!'
        exit 1
      }
      trap 'error $LINENO' ERR

      until printf "." && curl -d '{"label":"primary"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info &>/dev/null
      do sleep 5.2; done; echo "✓"

      function csr {
        cat <<EOF
      {"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
      EOF
      }

      function generate {

        CN=$1
        PROFILE=$2
        HOSTS=$3

        echo "$(csr $CN)" \
          | /opt/bin/cfssl gencert \
            -remote=pki.${ internal-tld }:8888 \
            -profile=$PROFILE \
            -hostname="$HOSTS" - \
          | /opt/bin/cfssljson -bare $CN

        chmod 0644 $${CN}.pem $${CN}-key.pem

      }

      mkdir -p $OUTDIR && cd $OUTDIR

      generate etcd client-server "etcd.${ internal-tld },${ fqdn }"
