#!/bin/bash -e

function usage {
  echo "USAGE: $0 <aws-region> <core-os-channel> <coreos-vm-type> <aws-key-name> <internal-tld> <cluster-name> <cidr-allow-ssh> <vpc-cidr> <pod-ip-range> <k8s-service-ip-range> <k8s-service-ip> <k8s-dns-ip>"
  echo "  example: $0 us-west-1 stable hvm k8s-testing testing.k8s testing 0.0.0.0/0 10.0.0.0/16 10.2.0.0/16 10.3.0.0/24 10.3.0.1 10.3.0.10"

  exit 1
}

if [[ $# -ne 12 ]]; then
  usage
fi

AWS_REGION="$1"
COREOS_CHANNEL="$2"
COREOS_VM_TYPE="$3"
AWS_EC2_KEY_NAME="$4"
INTERNAL_TLD="$5"
CLUSTER_NAME="$6"
CIDR_ALLOW_SSH="$7"
VPC_CIDR="$8"
POD_IP_RANGE="$9"
K8S_SERVICE_IP_RANGE="${10}"
K8S_SERVICE_IP="${11}"
K8S_DNS_IP="${12}"

COREOS_AMI_ID=`curl -s \
  $(printf "http://%s.release.core-os.net/amd64-usr/current/coreos_production_ami_%s_%s.txt" \
    $COREOS_CHANNEL $COREOS_VM_TYPE $AWS_REGION)`

AWS_ACCOUNT_ID=`aws iam get-user --output json \
	| awk '/arn:aws:/{print $2}' \
	| grep -Eo '[[:digit:]]{12}'`

AWS_REGION_AZS=`aws ec2 describe-availability-zones --region ${AWS_REGION} --output json \
  | jq --raw-output '.AvailabilityZones | map(.ZoneName) | .[]' \
  | xargs \
  | sed -e 's/ /,/g'`


cat <<EOF > terraform.tfvars
# Generated by scripts/init-variables.sh
aws = {
  account-id = "${AWS_ACCOUNT_ID}"
  azs = "${AWS_REGION_AZS}"
  key-name = "${AWS_EC2_KEY_NAME}"
  region = "${AWS_REGION}"
}
cidr = {
  allow-ssh = "${CIDR_ALLOW_SSH}"
  pods = "${POD_IP_RANGE}"
  service = "${K8S_SERVICE_IP_RANGE}"
  vpc = "${VPC_CIDR}"
}
coreos-aws = {
  ami = "${COREOS_AMI_ID}"
  channel = "${COREOS_CHANNEL}"
  type = "${COREOS_VM_TYPE}"
}
dns-service-ip = "${K8S_DNS_IP}"
internal-tld = "${INTERNAL_TLD}"
k8s-service-ip = "${K8S_SERVICE_IP}"
name = "${CLUSTER_NAME}"
s3-bucket = "${AWS_ACCOUNT_ID}-${CLUSTER_NAME}-${AWS_REGION}"
EOF
if [ -f ./vpc-existing.tfvars ]; then cat ./vpc-existing.tfvars >>terraform.tfvars ; fi
cat terraform.tfvars
